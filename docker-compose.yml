services:
  web:
    build: .
    ports:
      - "8090:8090"
    restart: unless-stopped
    volumes:
      - ./uploads:/uploads
    networks:
      - projectregister
    depends_on:
      db:
        condition: service_healthy

  go:
    image: golang:1.22-bullseye
    volumes:
      - .:/go/src/app
    working_dir: /go/src/app
    entrypoint: go
    networks:
      - projectregister
    depends_on:
      db:
        condition: service_healthy

  migrate:
    build:
      context: .
      dockerfile: build/docker/migrate/Dockerfile
    user: "1000:1000"
    volumes:
      - .:/app
    entrypoint: /migrate
    working_dir: /app
    networks:
      - projectregister
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_DB: 'projectregister_development'
      POSTGRES_USER: 'projectregister'
      POSTGRES_PASSWORD: 'password'
    ports:
      - '5432:5432'
    volumes:
      - pg-db:/var/lib/postgresql/data
    networks:
      - projectregister
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      retries: 3
      timeout: 5s

# Names our volume
volumes:
  pg-db:

networks:
  projectregister:
